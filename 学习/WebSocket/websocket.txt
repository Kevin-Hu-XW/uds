## WebSocket
### 背景

**1、Http半双工协议，信息单向传递（客户端->服务端）**

Web应用的通信过程使用的Http协议，就是客户端通过浏览器发起请求，服务器接收请求后进行处理并返回结果给客户端，客户端将响应结果进行渲染展示。Http协议通信只能由客户端发起，意味着服务端有变化无法主动通知客户端。这种机制对于信息变化不是特别明显的应用可以良好的支撑，但对于实时性要求高、海量并发的应用来说无法较好的支撑，在当前互联网场景下是经常需要面临的问题，如金融证券的实时信息、Web地理位置获取和社交网络实时信息推送。

**2、Http无状态协议**

Web应用中Http协议是客户端/服务器模式种所使用的协议，该协议是无状态的，无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态，从另一方面讲，打开一个服务器上的网页和你上次打开服务器上的网页之间没有任何联系。也就是每个请求都是独立和唯一的，也就意味着每次请求和响应中都会携带冗余信息(例如Cookie进行用户验证)

**补充Http无状态协议优缺点**

优点：服务器不用为每个客户端连接来分配内存来记忆大量状态，也不用为客户端失去连接清理内存
缺点：客户端每次请求都需要携带相应的参数，服务器需要消耗时间来处理这些参数

为了解决实时通信，于是采用了以下解决方案：

**轮询（polling）**：每隔一段时间，就发出一个请求，了解服务器有没有新的信息。不精准，有延时，大量无效数据交换。

**长轮询（ long polling）**：客户端向服务器请求信息，并在设定的时间段内保持连接。直到服务器有新消息响应，或者连接超时，这种技术常常称作“**挂起GET**”或“**搁置POST**”。占用服务器资源，相对轮询并没有优势，没有标准化。

**流化技术：**在流化技术中，客户端发送一个请求，服务器发送并维护一个持续更新和保持打开（可以是无限或者规定的时间段）的开放响应。每当服务器有需要交付给客户端的信息时，它就更新响应。服务器从不发出完成 HTTP 响应。代理和防火墙可能缓存响应，导致信息交付的延迟增加。

**虽然提供了实时的通信，但是增加了服务端的压力，就导致了websocket的诞生**

### 什么是 WebSocket ？

WebSocket是一种在单个TCP连接上进行的**全双工协议**，其最大的特点就是：服务器可以主动向客户端推送数据，客户端也可以主动向服务器推送数据，真正的双向平等对话。

### WebSocket与Http的区别

WebSocket 与 HTTP的关系图：

<img src="C:\Users\Admin\Desktop\工作\uds\学习\WebSocket\websocket与http联系.PNG" style="zoom: 80%;" />

相同点：都是基于TCP协议，都是应用层协议

联系：WebSocket也需要通过已建立的TCP连接来传输数据，具体实现是通过Http协议建立通道，在此基础上使用	   WebSocket进行通信

区别：

1、协议标识是ws(如果加密就是wss)

2、WebSocket是双向发送协议，模拟Socket协议，可以双向发送或接收消息，Http是单向的

3、WebSocket是有状态协议，Http是无状态协议

### WebSocket的连接过程

1、WebSocket是建立在TCP连接之上的，需要通过Http请求完成，即浏览器和服务器的三次握手

2、TCP建立连接后，浏览器通过Http向服务器发送WebSocket支持的版本号等信息

3、服务器收到握手请求后，采用Http进行响应

4、浏览器收到连接成功信息后，通过TCP通道进行全双工通信

在客户端，new WebSocket('ws://server.example.com')实例化新的WebSocket客户端对象，

连接服务端WebSocket URL，WebSocket客户端会自动解析辨别为WebSocket请求，从而连接服务端端口，执行双方握手过程

#### 客户端请求报文 Header

```js
GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
Origin: http://example.com
```

- **Upgrade：websocket**/**Connection: Upgrade**：参数值表明这是`WebSocket`类型请求（这个是Websocket的核心，告诉Apache、Nginx等服务器，发起的是Websocket协议）。
- **Sec-WebSocket-Key**：是一个`Base64`编码的值，是由浏览器随机生成的，提供基本的防护，防止恶意或者无意的连接。
- **Sec_WebSocket-Protocol**：是一个用户定义的字符串，用来区分同URL下，不同的服务所需要的协议。
- **Sec-WebSocket-Version**：表示 WebSocket 的版本，最初 WebSocket 协议太多，不同厂商都有自己的协议版本，不过现在已经定下来了。如果服务端不支持该版本，需要返回一个 `Sec-WebSocket-Versionheader`，里面包含服务端支持的版本号

#### 服务端响应报文 Header

```js
HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
Sec-WebSocket-Protocol: chat
```

1. 首先，`101` 状态码表示服务器已经理解了客户端的请求，并将通过`Upgrade` 消息头通知客户端采用不同的协议来完成这个请求；
2. 然后，`Sec-WebSocket-Accept` 这个则是经过服务器确认，并且加密过后的 `Sec-WebSocket-Key`；
3. 最后，`Sec-WebSocket-Protocol` 则是表示最终使用的协议。

至此，HTTP 已经完成它所有工作了，接下来就是完全按照 WebSocket 协议进行通信。

### Springboot整合Websocket构建在线聊天室

引入依赖

```xml
<!--websocket依赖-->
<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-websocket</artifactId>
</dependency>
```
